heat_template_version: 2015-10-15

description: |
  #### Production

  Parse Server is an open-source version of the Parse backend that can be
  deployed to any infrastructure that can run Node.js.  This stack requires an
  existing MongoDB instance.

  This template will only function with RCv3.
parameter_groups:
- label: Parse Settings
  parameters:
  - parse_url
  - parse_email
- label: Git Settings
  parameters:
  - git_repo_url
  - git_deploy_key
  - git_commit_sha
- label: RackConnect Settings
  parameters:
  - rc_network_name
- label: rax-dev-params
  parameters:
  - server_image
  - secondary_template
  - ansible_source
  - app_name
  - app_short_name
  - port
parameters:
  #parse Customization
  parse_url:
    type: string
    default: example.com
    label: Site Domain
    description: Domain to use with Parse Server
    constraints:
    - allowed_pattern: "^[a-zA-Z0-9.-]{1,255}.[a-zA-Z]{2,15}$"
      description: Must be a valid domain name
      description: Only can contain A-Z and 0-9
  parse_email:
    type: string
    default: admin@example.com
    label: Parse Admin E-mail
    description: E-mail Address for Parse Admin User
  #Git Settings
  git_repo_url:
    type: string
    default: ""
    label: Git Repository URL
    description: |
      URL to Git repository, using either SSH or HTTPS to connect.  If you use
      SSH, you will need to specify the Git Deploy Key in order to connect.
  git_deploy_key:
    type: string
    default: ""
    label: Git Deploy Key
    description: |
      Deploy key to be used when connecting to the specified Git repository via
      SSH.  Not used when the Git URL is not specified or uses HTTPS
  git_commit_sha:
    type: string
    default: "HEAD"
    label: Git Commit
    description: |
      The SHA of the Git commit to pull and deploy.
  rc_network_name:
    type: string
    label: RackConnect Network
    description: Name or UUID of RackConnected network to attach this server to
    constraints:
    - custom_constraint: rackconnect.network
    immutable: true
  #Advanced Options
  server_flavor:
    type: string
    default: 4 GB General Purpose v1
    label: Server Flavor
    description: Flavor of Cloud Server to use
    constraints:
    - allowed_values:
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
  server_image:
    type: string
    default: Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
    constraints:
    - allowed_values:
      - Ubuntu 14.04 LTS (Trusty Tahr) (PVHVM) (Orchestration)
  server_count:
    type: number
    default: 0
    label: Number of Secondary Servers
    description: Number of secondary web nodes
    constraints:
      - range: { min: 0, max: 10 }
  secondary_template:
    type: string
    default: http://catalog.rs-heat.com/parse-rc/parse-secondary.yaml
    label: Secondary Template
    description: Template to use for secondary servers
  ansible_source:
    type: string
    default: http://catalog.rs-heat.com/ansible-roles/ansible-roles.tar.gz
    label: Ansible Tarball
    description: The Ansible Roles will be pulled from the location provided
    immutable: true
  app_name:
    type: string
    default: Your Application
  app_short_name:
    type: string
    default: parse
  port:
    type: string
    default: 1337

resources:
  #Passwords
  parse_pass:
    type: OS::Heat::RandomString
  #SSH Key
  ssh_key:
    type: OS::Nova::KeyPair
    properties:
      name: { get_param: "OS::stack_id" }
      save_private_key: true
  #Software Configurations
  upload_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  parse_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      config: |
        ---
        - name: Install and configure parse
          hosts: localhost
          connection: local
          roles:
          - common
          - nginx
          - parse
  other_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: lsync_servers
        type: CommaDelimitedList
      - default: "[]"
        name: lsync_dirs
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_node_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure other things
          hosts: localhost
          connection: local
          roles:
          - firewall
          - lsync
  deploy_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_role_config
      server:
        get_resource: parse_server
  deploy_parse:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        nginx_vhost_str: { get_param: parse_url }
        nginx_vhost_template: "parse"
        nginx_overwrite: false
        parse_app_name: { get_param: app_name }
        parse_short_name: { get_param: app_short_name }
        parse_port: { get_param: port }
        parse_cloud_code_main: "/home/parse/cloud/main.js"
        parse_database_uri: "mongodb://parse:password@localhost:27017/parseDb"
        parse_application_id: "your_application_id"
        parse_master_key: "your_master_key"
        parse_collection_prefix: ""
        parse_client_key: ""
        parse_rest_api_key: ""
        parse_dotnet_key: ""
        parse_javascript_key: ""
        parse_file_key: ""
        parse_facebook_app_ids: ""
        parse_git_key: { get_param: git_deploy_key }
        parse_git_repo: { get_param: git_repo_url }
        parse_git_version: { get_param: git_commit_sha }
        parse_password: { get_attr: [parse_pass, value] }
        tz: "America/Chicago"
      config:
        get_resource: parse_config
      server:
        get_resource: parse_server
  deploy_other:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_parse
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        lsync_private_key: { get_attr: [ssh_key, private_key] }
        lsync_dirs: ['/home/parse', '/etc/nginx/conf.d/']
        lsync_servers: { get_attr: [parse_secondary, private_ip] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,80,tcp", "0.0.0.0,0,443,tcp"]
        firewall_nodes: { get_attr: [parse_secondary, private_ip] }
        firewall_node_rules: []
      config:
        get_resource: other_config
      server:
        get_resource: parse_server
  #Master Server
  parse_server:
    type: OS::Nova::Server
    properties:
      name: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      networks:
      - network: { get_param: rc_network_name }
      - network: 11111111-1111-1111-1111-111111111111
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "backup_agent_only,monitoring_defaults"
  parse_server_public_ip:
    type: Rackspace::RackConnect::PublicIP
    depends_on: parse_server
    properties:
      server_id: { get_resource: parse_server }
  #Monitoring Checks
  parse_server_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: deploy_parse
    properties:
      entity: { get_resource: parse_server }
      type: remote.http
      label:
        str_replace:
          template: stack Master HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [parse_server, accessIPv4] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [parse_server, accessIPv4] }
      target_receiver: IPv4
  load_balancer_http_check:
    type: Rackspace::CloudMonitoring::Check
    depends_on: load_balancer
    properties:
      entity: { get_resource: parse_server }
      type: remote.http
      label:
        str_replace:
          template: stack Load Balancer HTTP Check
          params:
            stack: { get_param: "OS::stack_name" }
      details:
        url:
          str_replace:
            template: "http://ipaddr"
            params:
              ipaddr: { get_attr: [parse_server, accessIPv4] }
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        stack-name: { get_param: "OS::stack_name" }
      period: 120
      timeout: 10
      monitoring_zones_poll:
      - Northern Virginia (IAD)
      - Chicago (ORD)
      - Dallas Fort Worth (DFW)
      - London (LON)
      target_hostname: { get_attr: [load_balancer, PublicIp] }
      target_receiver: IPv4
  #Cloud Backup
  parse_backup:
    type: Rackspace::Cloud::BackupConfig
    depends_on: parse_server
    properties:
      server: { get_resource: parse_server }
      BackupConfigurationName:
        str_replace:
          template: stack Weekly Backup
          params:
            stack: { get_param: "OS::stack_name" }
      Inclusions:
      - FilePath: "/home/parse"
        FileItemType: "Folder"
      NotifyFailure: true
      NotifyRecipients: { get_param: parse_email }
      TimeZoneId: Central Standard Time
      StartTimeAmPm: AM
      StartTimeHour: 1
      StartTimeMinute: 0
      HourInterval: null
      DayOfWeekId: 0
      Frequency: "Weekly"
      VersionRetention: 30
  #Secondary Server
  parse_secondary:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: server_count }
      resource_def:
        type: { get_param: secondary_template }
        properties:
          ssh_key: { get_resource: ssh_key }
          parent_stack_id: { get_param: "OS::stack_id" }
          server_image: { get_param: server_image }
          server_flavor: { get_param: server_flavor }
          apache_default_domain: { get_param: parse_url }
          master_server: { get_attr: [ parse_server, networks, private, 0] }
          server_name:
            str_replace:
              template: stack-secondary-%index%
              params:
                stack: { get_param: "OS::stack_name" }
          ansible_source: { get_param: ansible_source }
          parse_pass: { get_attr: [ parse_pass, value ] }
          rc_network_name: { get_param: rc_network_name }
  upload_lb_role_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: results
      config:
        str_replace:
          template: |
            #!/bin/bash
            set -e
            mkdir -p /etc/ansible/roles
            wget ansible_source -O /tmp/ansible-roles.tar.gz 2>&1
            tar -xf /tmp/ansible-roles.tar.gz --strip-components=1 -C /etc/ansible/roles
          params:
            ansible_source: { get_param: ansible_source }
  deploy_lb_roles:
    type: OS::Heat::SoftwareDeployment
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config:
        get_resource: upload_lb_role_config
      server:
        get_resource: load_balancer
  deploy_loadbalancer:
    type: OS::Heat::SoftwareDeployment
    depends_on: deploy_lb_roles
    properties:
      signal_transport: TEMP_URL_SIGNAL
      input_values:
        nginx_vhost_str: { get_param: parse_url }
        nginx_vhost_template: "loadbalancer"
        nginx_upstream_server: { get_attr: [parse_server, networks, { get_param: rc_network_name}, 0] }
        nginx_lb_nodes: { get_attr: [parse_secondary, public_ip] }
        firewall_global_rules: [ "0.0.0.0,0,22,tcp", "0.0.0.0,0,80,tcp", "0.0.0.0,0,443,tcp"]
      config:
        get_resource: loadbalancer_config
      server:
        get_resource: load_balancer
  loadbalancer_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ansible
      inputs:
      - default: "[]"
        name: nginx_lb_nodes
        type: CommaDelimitedList
      - default: "[]"
        name: firewall_global_rules
        type: CommaDelimitedList
      config: |
        ---
        - name: Install and configure nginx as Load Balancer
          hosts: localhost
          connection: local
          roles:
          - nginx
          - firewall
  load_balancer:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: stack_Load_Balancer
          params:
            stack: { get_param: "OS::stack_name" }
      image: { get_param: server_image }
      flavor: { get_param: loadbalancer_flavor }
      key_name: { get_resource: ssh_key }
      software_config_transport: POLL_TEMP_URL
      config_drive: true
      user_data_format: SOFTWARE_CONFIG
      networks:
      - network: { get_param: rc_network_name }
      - network: 11111111-1111-1111-1111-111111111111
      metadata:
        rax-heat: { get_param: "OS::stack_id" }
        build_config: "monitoring_agent_only"
  load_balancer_public_ip:
    type: Rackspace::RackConnect::PublicIP
    depends_on:
    - load_balancer
    properties:
      server_id: { get_resource: load_balancer }

outputs:
  ssh_private_key:
    description: SSH Private Key
    value:
      get_attr: [ssh_key, private_key]
  parse_password:
    description: SSH Password for 'parse'
    value:
      get_attr: [parse_pass, value]
  server_ip:
    description: Primary Server Public IP
    value:
      get_attr: [parse_server, accessIPv4]
  secondary_ip:
    description: Secondary Server Public IPs
    value:
      get_attr: [parse_secondary, public_ip]
  public_ip:
    description: Load Balancer IP
    value:
      get_attr: [load_balancer, accessIPv4]
  parse_api_url:
    description: Parse API URL
    value:
      str_replace:
        template: https://url/parse/
        params:
          url: { get_param: parse_url }
